import { action } from "./_generated/server";
import Scorecard from "scorecard-ai";
import { v } from "convex/values";

export const setupScorecardProject = action({
  args: {},
  handler: async () => {
    console.log("--- Starting Scorecard.ai Project Setup ---");

    const scorecardApiKey = process.env.SCORECARD_API_KEY;
    if (!scorecardApiKey) {
      const errorMsg = "SCORECARD_API_KEY is not set. Please add it to your Convex environment variables before running this setup.";
      console.error(errorMsg);
      return { success: false, error: errorMsg };
    }

    try {
      const client = new Scorecard({ apiKey: scorecardApiKey });

      // 1. Create Project
      console.log("Creating project...");
      const project = await client.projects.create({
        name: "VentureSmith Evaluation",
        description: "Automated evaluation for AI-generated content in VentureSmith."
      });
      console.log(`Project created with ID: ${project.id}`);

      // 2. Create Metrics
      console.log("Creating metrics...");
      const metricsToCreate = [
        { name: "Clarity", description: "How clear and easy to understand is the generated content?" },
        { name: "Feasibility", description: "How feasible and realistic is the business plan?" },
        { name: "Completeness", description: "Does the business plan include all the required sections?" },
      ];

      const createdMetrics = await Promise.all(
        metricsToCreate.map(metric => 
          client.metrics.create(project.id, {
            name: metric.name,
            description: metric.description,
            evalType: 'ai',
            outputType: 'boolean',
            promptTemplate: `Is the following content good in terms of ${metric.name}? Answer with only 'true' or 'false'. Content: {{outputs.output}}`,
          })
        )
      );
      const metricIds = createdMetrics.map(m => m.id);
      console.log(`Metrics created with IDs: ${metricIds.join(", ")}`);

      // 3. Create Testset
      console.log("Creating testset...");
      const testsetSchema = {
        type: "object",
        properties: {
          user_query: { type: "string" },
          ideal_output: { type: "string" },
        },
        required: ["user_query"],
      };

      const testset = await client.testsets.create(project.id, {
        name: "Business Plan Generation",
        description: "Test cases for generating business plans.",
        jsonSchema: testsetSchema,
        fieldMapping: {
            inputs: ["user_query"],
            expected: ["ideal_output"],
            metadata: [],
        }
      });
      console.log(`Testset created with ID: ${testset.id}`);

      // 4. Create a dummy Testcase
      console.log("Creating dummy testcase...");
      await client.testcases.create(testset.id, {
        items: [
            {
                jsonData: {
                    user_query: "Generate a business plan for a new AI-powered coffee shop.",
                    ideal_output: "A comprehensive business plan should be generated."
                }
            }
        ]
      });
      console.log("Dummy testcase created.");

      // 5. Log the final config file content
      const configFileContent = `
// This file is auto-generated by the setupScorecardProject action.
// Do not edit this file manually.

export const SCORECARD_CONFIG = {
  projectId: "${project.id}",
  evaluations: {
    businessPlan: {
      testsetId: "${testset.id}",
      metricIds: [${metricIds.map(id => `"${id}"`).join(", ")}],
    },
  },
};
`;

      console.log("\n--- âœ… Scorecard.ai Setup Complete! ---");
      console.log("Please copy the entire code block below and paste it into the `convex/scorecard.config.ts` file, replacing its content:");
      console.log("--------------------------------------------------");
      console.log(configFileContent);
      console.log("--------------------------------------------------");

      return {
        success: true,
      };

    } catch (error: any) {
      console.error("Failed to setup Scorecard.ai project.", error.message);
      return { success: false, error: error.message };
    }
  },
});